# Dependency stage
FROM --platform=linux/arm64 golang:1.23.4-bookworm AS deps

# Cache apt packages
RUN rm -f /etc/apt/apt.conf.d/docker-clean && \
    echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

# Install build dependencies with cache
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y \
    libgpgme-dev \
    libbtrfs-dev \
    libgpg-error-dev \
    pkg-config \
    file \
    gcc \
    libc6-dev \
    musl-dev \
    libgpgme11-dev \
    libassuan-dev \
    libgpg-error-dev \
    libassuan-dev \
    libgpgme11-dev \
    libgpg-error-dev \
    libassuan-dev \
    libgpgme-dev \
    libgpg-error-dev \
    libassuan-dev

# Set up workspace
WORKDIR /go/src/app
COPY go.mod go.sum ./
ENV GOMODCACHE=/tmp/mod
RUN go mod download

# Build stage
FROM deps AS builder
WORKDIR /go/src/app
COPY . .

# Verify Go environment
RUN echo "=== Go Environment ===" && \
    go version && \
    go env GOARCH GOOS CGO_ENABLED GOTOOLCHAIN

# Build the binary with detailed logging
ENV GOTOOLCHAIN=local
ENV CGO_ENABLED=1
ENV GOARCH=arm64
ENV GO111MODULE=on
RUN go build -v -tags musl,netgo,osusergo,sqlite_omit_load_extension,containers_image_openpgp,exclude_graphdriver_devicemapper,exclude_graphdriver_btrfs,containers_image_ostree_stub,no_pkcs11 -ldflags='-linkmode external -extldflags "-static -L/usr/lib/aarch64-linux-gnu -lgpgme -lassuan -lgpg-error" -X github.com/mattn/go-sqlite3.libVersion=3' -o kube-mqtt-mirror-arm64 && \
    echo "=== Binary Info ===" && \
    file kube-mqtt-mirror-arm64
