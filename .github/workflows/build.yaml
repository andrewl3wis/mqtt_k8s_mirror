name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build binary
        run: CGO_ENABLED=0 go build -o kube-mqtt-mirror .

      - uses: actions/upload-artifact@v3
        with:
          name: kube-mqtt-mirror
          path: kube-mqtt-mirror
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        messaging: [sqlite, mqtt, postgres]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: kube-mqtt-mirror

      - name: Make binary executable
        run: chmod +x kube-mqtt-mirror

      - name: Setup MQTT
        if: matrix.messaging == 'mqtt'
        run: |
          sudo apt-get update
          sudo apt-get install -y mosquitto
          echo "listener 1883" | sudo tee /etc/mosquitto/conf.d/test.conf
          echo "allow_anonymous true" | sudo tee -a /etc/mosquitto/conf.d/test.conf
          sudo systemctl start mosquitto

      - name: Setup Postgres Table
        if: matrix.messaging == 'postgres'
        run: |
          PGPASSWORD=test psql -h localhost -U test -d test -c "
            CREATE TABLE IF NOT EXISTS messages (
              id SERIAL PRIMARY KEY,
              topic TEXT NOT NULL,
              payload TEXT NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );"

      - name: Generate TLS Certificate
        run: |
          openssl req -x509 -newkey rsa:2048 \
            -keyout server.key \
            -out server.crt \
            -days 365 \
            -nodes \
            -subj "/CN=localhost" \
            -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"
          chmod 600 server.key server.crt

      - name: Start Program
        run: |
          BROKER_ADDR=""
          EXTRA_ARGS=""
          case "${{ matrix.messaging }}" in
            "sqlite") BROKER_ADDR="test.db" ;;
            "mqtt") BROKER_ADDR="tcp://localhost:1883" ;;
            "postgres") 
              BROKER_ADDR="localhost:5432"
              EXTRA_ARGS="-username test -password test"
              ;;
          esac

          ./kube-mqtt-mirror \
            -webhook \
            -mirror \
            -messaging-type ${{ matrix.messaging }} \
            -broker "$BROKER_ADDR" \
            $EXTRA_ARGS \
            -webhook-port 8443 \
            -local-registry localhost:5000 \
            -insecure-registries \
            -tls-cert server.crt \
            -tls-key server.key \
            -log-file kube-mqtt-mirror.log &
          
          timeout=30
          while ! grep -q "Subscribed to topic: image/download" kube-mqtt-mirror.log; do
            if [ $timeout -le 0 ]; then
              echo "Program failed to start"
              cat kube-mqtt-mirror.log
              exit 1
            fi
            sleep 1
            ((timeout--))
          done

      - name: Test Webhooks
        run: |
          # Test multi-container pod
          echo "Testing multi-container pod..."
          curl -s -k -H "Content-Type: application/json" -d '{
            "kind": "AdmissionReview",
            "apiVersion": "admission.k8s.io/v1",
            "request": {
              "uid": "test1",
              "kind": {"group": "", "version": "v1", "kind": "Pod"},
              "resource": {"group": "", "version": "v1", "resource": "pods"},
              "operation": "CREATE",
              "object": {
                "apiVersion": "v1",
                "kind": "Pod",
                "metadata": {
                  "name": "test-pod-1",
                  "annotations": {
                    "webhook": "true"
                  }
                },
                "spec": {
                  "containers": [
                    {
                      "name": "web",
                      "image": "nginx:alpine"
                    },
                    {
                      "name": "cache",
                      "image": "redis:alpine"
                    },
                    {
                      "name": "db",
                      "image": "postgres:alpine"
                    }
                  ]
                }
              }
            }
          }' https://localhost:8443/webhook &

          # Test concurrent pods
          echo "Testing concurrent pods..."
          curl -s -k -H "Content-Type: application/json" -d '{
            "kind": "AdmissionReview",
            "apiVersion": "admission.k8s.io/v1",
            "request": {
              "uid": "test2",
              "kind": {"group": "", "version": "v1", "kind": "Pod"},
              "resource": {"group": "", "version": "v1", "resource": "pods"},
              "operation": "CREATE",
              "object": {
                "apiVersion": "v1",
                "kind": "Pod",
                "metadata": {
                  "name": "test-pod-2",
                  "annotations": {
                    "webhook": "true"
                  }
                },
                "spec": {
                  "containers": [
                    {
                      "name": "app",
                      "image": "busybox:latest"
                    }
                  ]
                }
              }
            }
          }' https://localhost:8443/webhook &

          curl -s -k -H "Content-Type: application/json" -d '{
            "kind": "AdmissionReview",
            "apiVersion": "admission.k8s.io/v1",
            "request": {
              "uid": "test3",
              "kind": {"group": "", "version": "v1", "kind": "Pod"},
              "resource": {"group": "", "version": "v1", "resource": "pods"},
              "operation": "CREATE",
              "object": {
                "apiVersion": "v1",
                "kind": "Pod",
                "metadata": {
                  "name": "test-pod-3",
                  "annotations": {
                    "webhook": "true"
                  }
                },
                "spec": {
                  "containers": [
                    {
                      "name": "app",
                      "image": "memcached:alpine"
                    }
                  ]
                }
              }
            }
          }' https://localhost:8443/webhook &

          # Wait for all images to be processed
          IMAGES=("nginx:alpine" "redis:alpine" "postgres:alpine" "busybox:latest" "memcached:alpine")
          timeout=120
          for img in "${IMAGES[@]}"; do
            while ! grep -q "Successfully downloaded image: $img" kube-mqtt-mirror.log; do
              if [ $timeout -le 0 ]; then
                echo "Image processing failed for $img"
                cat kube-mqtt-mirror.log
                exit 1
              fi
              sleep 1
              ((timeout--))
            done
            echo "Successfully processed $img"
          done

      - name: Stop MQTT
        if: matrix.messaging == 'mqtt'
        run: |
          sudo systemctl stop mosquitto
          sudo rm -f /etc/mosquitto/conf.d/test.conf
