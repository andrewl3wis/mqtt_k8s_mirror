name: Test Go Program with kind and MQTT

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  amd64-build:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'  # Use Go 1.22 or later
      
      # Cache Go modules
      - name: Cache Go modules
        id: go-mod-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Install system dependencies for AMD64
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgpgme-dev \
            btrfs-progs \
            libbtrfs-dev \
            pkg-config

      # Add dependencies and tidy
      - name: Add dependencies
        run: |
          go get github.com/containers/image/v5/copy
          go get github.com/eclipse/paho.mqtt.golang
          go mod tidy

      # Build the Go binary for AMD64
      - name: Build AMD64 binary
        run: |
          # Build for AMD64
          CGO_ENABLED=1 GOARCH=amd64 go build -v -x -o kube-mqtt-mirror-amd64
          echo "Built AMD64 binary: kube-mqtt-mirror-amd64"
          
          # Create a symbolic link to amd64 version as default for testing
          ln -s kube-mqtt-mirror-amd64 kube-mqtt-mirror

      # Upload AMD64 binary as artifact
      - name: Upload AMD64 binary
        uses: actions/upload-artifact@v3
        with:
          name: kube-mqtt-mirror-amd64
          path: kube-mqtt-mirror-amd64

  arm64-build:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      
      # Cache Go modules
      - name: Cache Go modules
        id: go-mod-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Install system dependencies for ARM64
      - name: Install system dependencies
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y \
            libgpgme-dev:arm64 \
            libbtrfs-dev:arm64 \
            pkg-config \
            gpgme-config:arm64 \
            gcc-aarch64-linux-gnu

          # Ensure pkg-config can find ARM64 gpgme
          sudo cp /usr/lib/aarch64-linux-gnu/pkgconfig/gpgme*.pc /usr/lib/pkgconfig/ || true

      # Add dependencies and tidy
      - name: Add dependencies
        run: |
          go get github.com/containers/image/v5/copy
          go get github.com/eclipse/paho.mqtt.golang
          go mod tidy

      # Build the Go binary for ARM64
      - name: Build ARM64 binary
        run: |
          # Debug output
          echo "=== Checking pkg-config and library paths ==="
          echo "ARM64 pkg-config for gpgme:"
          PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig pkg-config --libs --cflags gpgme || true
          echo "Available .pc files:"
          find /usr -name "gpgme*.pc" || true
          
          # Build for ARM64 with proper CGO settings
          CGO_ENABLED=1 GOARCH=arm64 CC=aarch64-linux-gnu-gcc PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig go build -v -x -o kube-mqtt-mirror-arm64
          echo "Built ARM64 binary: kube-mqtt-mirror-arm64"

      # Upload ARM64 binary as artifact
      - name: Upload ARM64 binary
        uses: actions/upload-artifact@v3
        with:
          name: kube-mqtt-mirror-arm64
          path: kube-mqtt-mirror-arm64

  test:
    needs: [amd64-build]
    runs-on: ubuntu-latest

    steps:
      # Check out the repository for test files
      - name: Checkout code
        uses: actions/checkout@v3

      # Download AMD64 binary
      - name: Download AMD64 binary
        uses: actions/download-artifact@v3
        with:
          name: kube-mqtt-mirror-amd64

      # Make binary executable
      - name: Make binary executable
        run: |
          chmod +x kube-mqtt-mirror-amd64
          ln -s kube-mqtt-mirror-amd64 kube-mqtt-mirror

      # Install minimal runtime dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            mosquitto

      # Generate self-signed TLS certificates
      - name: Generate TLS certificates
        run: |
          # Generate TLS certificates with proper paths
          openssl req -x509 -newkey rsa:2048 \
            -keyout server.key \
            -out server.crt \
            -days 365 \
            -nodes \
            -subj "/CN=host.docker.internal" \
            -addext "subjectAltName=IP:172.17.0.1"
          chmod 600 server.key server.crt

      # Set up kind cluster using the kind-cluster action
      - name: Create kind cluster
        uses: helm/kind-action@v1.12.0
        with:
          registry: true
          registry_name: my-registry
          registry_port: 5000
          registry_enable_delete: true

      # Deploy the program and test it
      - name: Deploy and test
        run: |
          # Start the program in the background with new configuration
          ./kube-mqtt-mirror \
            --webhook \
            --mirror \
            --mqtt-broker tcp://localhost:1883 \
            --webhook-port 8443 \
            --insecure-registries \
            --tls-cert server.crt \
            --tls-key server.key \
            --log-file kube-mqtt-mirror.log
          
          CA_BUNDLE=$(cat server.crt | base64 | tr -d '\n')
          # Wait for the program to start
          sleep 5

          # Create a MutatingWebhookConfiguration
          kubectl apply -f - <<EOF
          apiVersion: admissionregistration.k8s.io/v1
          kind: MutatingWebhookConfiguration
          metadata:
            name: webhook-mirroring
          webhooks:
            - name: webhook.mirroring.example.com
              admissionReviewVersions: ["v1"]
              sideEffects: None
              rules:
                - operations: ["CREATE"]
                  apiGroups: [""]
                  apiVersions: ["v1"]
                  resources: ["pods"]
              clientConfig:
                url: "https://172.17.0.1:8443/webhook"
                caBundle: $CA_BUNDLE
              failurePolicy: Fail
          EOF

          # Create a pod with the webhook annotation
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Pod
          metadata:
            name: webhook-test-pod
            annotations:
              webhook: "true"
          spec:
            containers:
              - name: nginx
                image: nginx
          EOF

          # Wait for the pod to be created
          sleep 10

          # Wait for log file to be created and populated
          sleep 5
          
          # Check if log file exists and show contents
          if [ -f kube-mqtt-mirror.log ]; then
            echo "=== Program Logs ==="
            cat kube-mqtt-mirror.log
          else
            echo "Error: Log file kube-mqtt-mirror.log not found"
            exit 1
          fi

