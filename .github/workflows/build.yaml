name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        messaging: [sqlite, mqtt, postgres]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build binary
        run: |
          CGO_ENABLED=0 go build -o kube-mqtt-mirror .
          chmod +x kube-mqtt-mirror

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Create kind cluster
        uses: helm/kind-action@v1.12.0
        with:
          registry: true

      - name: Verify registry
        run: |
          # Wait for registry to be ready
          echo "Verifying Kind registry..."
          timeout=30
          for i in $(seq 1 $timeout); do
            if docker ps | grep -q 'registry:2'; then
              echo "Registry container is running"
              if curl -s http://localhost:5000/v2/ > /dev/null; then
                echo "Registry API is accessible"
                break
              fi
            fi
            if [ $i -eq $timeout ]; then
              echo "Registry failed to start:"
              docker ps
              docker logs $(docker ps -q --filter ancestor=registry:2)
              exit 1
            fi
            echo "Waiting for registry ($i/$timeout)..."
            sleep 1
          done

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y iproute2

      - name: Generate TLS certificates
        run: |
          # Get Docker host IP
          DOCKER_HOST_IP=$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+')
          echo "Using Docker host IP: $DOCKER_HOST_IP"

          # Generate certs with Docker host IP
          openssl req -x509 -newkey rsa:2048 \
            -keyout server.key \
            -out server.crt \
            -days 365 \
            -nodes \
            -subj "/CN=localhost" \
            -addext "subjectAltName=DNS:localhost,IP:127.0.0.1,IP:$DOCKER_HOST_IP"
          chmod 600 server.key server.crt

      - name: Setup MQTT (if needed)
        if: matrix.messaging == 'mqtt'
        run: |
          # Install Mosquitto
          sudo apt-get update
          sudo apt-get install -y mosquitto
          
          # Configure Mosquitto for testing
          echo "listener 1883" | sudo tee /etc/mosquitto/conf.d/test.conf
          echo "allow_anonymous true" | sudo tee -a /etc/mosquitto/conf.d/test.conf
          
          # Start Mosquitto
          sudo systemctl start mosquitto
          echo "MQTT broker started on port 1883"

      - name: Setup Postgres (if needed)
        if: matrix.messaging == 'postgres'
        run: |
          # Start PostgreSQL
          docker run -d --name postgres \
            -e POSTGRES_USER=test \
            -e POSTGRES_PASSWORD=test \
            -e POSTGRES_DB=test \
            -p 5432:5432 \
            postgres:14-alpine

          # Wait for PostgreSQL to be ready
          timeout=30
          for i in $(seq 1 $timeout); do
            if docker exec postgres pg_isready -U test > /dev/null 2>&1; then
              echo "PostgreSQL is ready"
              break
            fi
            if [ $i -eq $timeout ]; then
              echo "PostgreSQL failed to start"
              exit 1
            fi
            echo "Waiting for PostgreSQL ($i/$timeout)..."
            sleep 1
          done

          # Create required table
          docker exec postgres psql -U test -d test -c "
            CREATE TABLE IF NOT EXISTS messages (
              id SERIAL PRIMARY KEY,
              topic TEXT NOT NULL,
              payload TEXT NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );"

      - name: Run Kind Test
        run: |
          # Get Docker host IP
          DOCKER_HOST_IP=$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+')
          echo "Using Docker host IP: $DOCKER_HOST_IP"

          # Create log file
          touch kube-mqtt-mirror.log

          # Configure messaging settings based on type
          BROKER_ADDR=""
          case "${{ matrix.messaging }}" in
            "sqlite")
              BROKER_ADDR="test.db"
              ;;
            "mqtt")
              BROKER_ADDR="tcp://localhost:1883"
              ;;
            "postgres")
              BROKER_ADDR="postgres://test:test@localhost:5432/test?sslmode=disable"
              ;;
          esac

          # Start the program
          ./kube-mqtt-mirror \
            -webhook \
            -mirror \
            -messaging-type ${{ matrix.messaging }} \
            -broker "$BROKER_ADDR" \
            -webhook-port 8443 \
            -local-registry localhost:5000 \
            -insecure-registries \
            -tls-cert server.crt \
            -tls-key server.key \
            -log-file kube-mqtt-mirror.log &
          MIRROR_PID=$!

          # Show program output in real time
          tail -f kube-mqtt-mirror.log &
          TAIL_PID=$!

          # Wait for program to start
          timeout=30
          started=false
          for i in $(seq 1 $timeout); do
            if grep -q "Subscribed to topic: image/download" kube-mqtt-mirror.log; then
              echo "Program started successfully"
              started=true
              break
            fi
            echo "Waiting for program to start ($i/$timeout)..."
            sleep 1
          done

          # Stop tailing the log
          kill $TAIL_PID || true

          if [ "$started" != "true" ]; then
            echo "Program failed to start"
            cat kube-mqtt-mirror.log
            exit 1
          fi

          # Configure webhook
          CA_BUNDLE=$(cat server.crt | base64 | tr -d '\n')
          cat > webhook.yaml <<EOF
          apiVersion: admissionregistration.k8s.io/v1
          kind: MutatingWebhookConfiguration
          metadata:
            name: webhook-mirroring
          webhooks:
            - name: webhook.mirroring.example.com
              admissionReviewVersions: ["v1"]
              sideEffects: None
              rules:
                - operations: ["CREATE"]
                  apiGroups: [""]
                  apiVersions: ["v1"]
                  resources: ["pods"]
              clientConfig:
                url: "https://$DOCKER_HOST_IP:8443/webhook"
                caBundle: $CA_BUNDLE
              failurePolicy: Fail
          EOF
          
          kubectl apply -f webhook.yaml

          # Wait for local registry to be ready
          echo "Waiting for local registry..."
          timeout=30
          registry_ready=false
          for i in $(seq 1 $timeout); do
            if curl -s http://localhost:5000/v2/ > /dev/null; then
              echo "Local registry is ready"
              registry_ready=true
              break
            fi
            echo "Waiting for registry ($i/$timeout)..."
            sleep 1
          done

          if [ "$registry_ready" != "true" ]; then
            echo "Local registry failed to start"
            exit 1
          fi

          # Create test pod
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Pod
          metadata:
            name: webhook-test-pod
            annotations:
              webhook: "true"
          spec:
            containers:
              - name: nginx
                image: nginx
          EOF

          # Wait for image copy to complete
          echo "Waiting for image copy to complete..."
          timeout=60
          copied=false
          for i in $(seq 1 $timeout); do
            if grep -q "Multi-arch image copy completed successfully" kube-mqtt-mirror.log; then
              echo "Image copy completed successfully"
              copied=true
              break
            elif grep -q "Single-arch image copy completed successfully" kube-mqtt-mirror.log; then
              echo "Image copy completed successfully"
              copied=true
              break
            elif grep -q "Failed to" kube-mqtt-mirror.log; then
              echo "Image copy failed with error:"
              grep "Failed to" kube-mqtt-mirror.log
              exit 1
            fi
            echo "Waiting for image copy ($i/$timeout)..."
            sleep 1
          done

          if [ "$copied" != "true" ]; then
            echo "Image copy timed out after ${timeout} seconds"
            echo "Last 20 lines of log:"
            tail -n 20 kube-mqtt-mirror.log
            exit 1
          fi

          # Wait for pod to be ready
          if ! kubectl wait --for=condition=ready pod/webhook-test-pod --timeout=60s; then
            echo "Pod creation failed"
            kubectl describe pod webhook-test-pod
            kubectl logs webhook-test-pod
            exit 1
          fi

          # Verify multi-arch support
          echo "Verifying multi-arch support for nginx image..."
          MANIFEST_LIST=$(curl -s -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json,application/vnd.oci.image.index.v1+json" http://localhost:5000/v2/nginx/manifests/latest)
          if [ $? -ne 0 ]; then
            echo "Failed to get manifest list"
            exit 1
          fi

          # Check for both amd64 and arm64 platforms
          if ! echo "$MANIFEST_LIST" | grep -q "amd64" || ! echo "$MANIFEST_LIST" | grep -q "arm64"; then
            echo "Missing architecture in manifest list:"
            echo "$MANIFEST_LIST"
            exit 1
          fi

          echo "Multi-arch verification successful - found both amd64 and arm64 architectures"

          # Cleanup
          kill $MIRROR_PID || true
          kubectl delete -f webhook.yaml
          kubectl delete pod webhook-test-pod

      - name: Cleanup Services
        if: always()
        run: |
          case "${{ matrix.messaging }}" in
            "postgres")
              docker rm -f postgres || true
              ;;
            "mqtt")
              sudo systemctl stop mosquitto || true
              sudo rm -f /etc/mosquitto/conf.d/test.conf || true
              ;;
          esac
