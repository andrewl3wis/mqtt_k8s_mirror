name: Test Go Program with kind and MQTT

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  amd64-build:
    runs-on: ubuntu-22.04

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '=1.23.4'  # Exact version match
          check-latest: true
      
      # Cache Go modules
      - name: Cache Go modules
        id: go-mod-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-amd64-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-amd64-

      # Install system dependencies for AMD64
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgpgme-dev \
            btrfs-progs \
            libbtrfs-dev \
            pkg-config

      # Verify and download dependencies
      - name: Verify dependencies
        run: |
          echo "=== Go Module Information ==="
          go version
          go mod verify
          go mod graph
          go mod download -json
          go list -m all

      # Build the Go binary for AMD64
      - name: Build AMD64 binary
        run: |
          # Set environment variables
          export GOTOOLCHAIN=local
          export CGO_ENABLED=1
          export GOARCH=amd64
          export GO111MODULE=on

          # Show build environment
          echo "=== Go Environment ==="
          go env
          
          # Build with detailed logging
          go build -v -x -o kube-mqtt-mirror-amd64 2>&1 | tee build.log
          
          # Show binary info
          echo "=== AMD64 Binary Info ==="
          file kube-mqtt-mirror-amd64
          echo "=== Dependencies ==="
          ldd kube-mqtt-mirror-amd64
          echo "=== Library Files ==="
          ldd kube-mqtt-mirror-amd64 | grep "=> /" | awk '{print $3}' | xargs ls -l
          
          # Create a symbolic link to amd64 version as default for testing
          ln -s kube-mqtt-mirror-amd64 kube-mqtt-mirror

      # Upload AMD64 binary as artifact
      - name: Upload AMD64 binary
        uses: actions/upload-artifact@v3
        with:
          name: kube-mqtt-mirror-amd64
          path: kube-mqtt-mirror-amd64

  arm64-build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ARM64 binary in Docker
        run: |
          # Create Dockerfile for ARM64 build with multi-stage build
          cat > Dockerfile.arm64 <<EOF
          # Build stage
          FROM --platform=linux/arm64 golang:1.23.4-bookworm AS builder

          # Install build dependencies
          RUN apt-get update && apt-get install -y \
              libgpgme-dev \
              libbtrfs-dev \
              pkg-config \
              file

          WORKDIR /build
          COPY go.mod go.sum ./
          
          # Verify and download dependencies
          RUN echo "=== Go Module Information ===" && \
              go version && \
              go mod verify && \
              go mod graph && \
              go mod download -json && \
              go list -m all

          COPY . .

          # Verify Go environment
          RUN echo "=== Go Environment ===" && \
              go version && \
              go env GOARCH GOOS CGO_ENABLED GOTOOLCHAIN

          # Build the binary with detailed logging
          ENV GOTOOLCHAIN=local
          ENV CGO_ENABLED=1
          ENV GOARCH=arm64
          ENV GO111MODULE=on
          RUN set -ex && \
              echo "=== Building with flags ===" && \
              go env && \
              go build -v -x -o kube-mqtt-mirror-arm64 2>&1 | tee build.log && \
              echo "=== Binary Info ===" && \
              file kube-mqtt-mirror-arm64 && \
              echo "=== Dependencies ===" && \
              ldd kube-mqtt-mirror-arm64 && \
              echo "=== Copying Dependencies ===" && \
              mkdir -p /build/deps && \
              ldd kube-mqtt-mirror-arm64 | \
              grep "=> /" | \
              awk '{print $3}' | \
              xargs -I '{}' bash -c 'mkdir -p "/build/deps/$(dirname {})" && cp -v "{}" "/build/deps/{}"' && \
              echo "=== Copied Files ===" && \
              find /build/deps -type f -exec ls -l {} \;

          # Final stage
          FROM --platform=linux/arm64 debian:bookworm-slim

          # Install runtime dependencies
          RUN apt-get update && apt-get install -y \
              libgpgme11 \
              libbtrfs0 \
              file

          # Copy binary and all dependencies
          COPY --from=builder /build/kube-mqtt-mirror-arm64 /kube-mqtt-mirror-arm64
          COPY --from=builder /build/deps/ /
          
          # Verify environment and dependencies
          RUN echo "=== System Information ===" && \
              uname -a && \
              echo "=== Library Search Paths ===" && \
              ldconfig -v 2>/dev/null | grep -v "^$" && \
              echo "=== Binary Dependencies ===" && \
              ldd /kube-mqtt-mirror-arm64
          
          # Verify binary and its dependencies
          RUN echo "=== Binary Info in Final Stage ===" && \
              file /kube-mqtt-mirror-arm64 && \
              echo "=== Library Dependencies ===" && \
              ldd /kube-mqtt-mirror-arm64 && \
              echo "=== Library Files ===" && \
              ls -l /usr/lib/aarch64-linux-gnu/libgpgme.so* && \
              ls -l /usr/lib/aarch64-linux-gnu/libbtrfs.so*
          EOF

          # Build using buildx
          docker buildx build \
            --platform=linux/arm64 \
            --output type=local,dest=. \
            -f Dockerfile.arm64 .

      - name: Upload ARM64 binary
        uses: actions/upload-artifact@v3
        with:
          name: kube-mqtt-mirror-arm64
          path: kube-mqtt-mirror-arm64

  test:
    needs: [amd64-build, arm64-build]
    runs-on: ubuntu-22.04

    steps:
      # Check out the repository for test files
      - name: Checkout code
        uses: actions/checkout@v3

      # Download binaries
      - name: Download AMD64 binary
        uses: actions/download-artifact@v3
        with:
          name: kube-mqtt-mirror-amd64

      - name: Download ARM64 binary
        uses: actions/download-artifact@v3
        with:
          name: kube-mqtt-mirror-arm64

      # Make binaries executable and verify
      - name: Make binaries executable and verify
        run: |
          # Make binaries executable
          chmod +x kube-mqtt-mirror-amd64 kube-mqtt-mirror-arm64
          ln -s kube-mqtt-mirror-amd64 kube-mqtt-mirror

          # Verify binary architectures
          echo "=== AMD64 Binary Info ==="
          file kube-mqtt-mirror-amd64
          
          echo "=== ARM64 Binary Info ==="
          file kube-mqtt-mirror-arm64

      # Install minimal runtime dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            mosquitto

      # Generate self-signed TLS certificates
      - name: Generate TLS certificates
        run: |
          # Generate TLS certificates with proper paths
          openssl req -x509 -newkey rsa:2048 \
            -keyout server.key \
            -out server.crt \
            -days 365 \
            -nodes \
            -subj "/CN=host.docker.internal" \
            -addext "subjectAltName=IP:172.17.0.1"
          chmod 600 server.key server.crt

      # Set up kind cluster using the kind-cluster action
      - name: Create kind cluster
        uses: helm/kind-action@v1.12.0
        with:
          registry: true
          registry_name: my-registry
          registry_port: 5000
          registry_enable_delete: true

      # Deploy the program and test it
      - name: Deploy and test
        run: |
          # Start the program in the background with new configuration
          ./kube-mqtt-mirror \
            --webhook \
            --mirror \
            --mqtt-broker tcp://localhost:1883 \
            --webhook-port 8443 \
            --insecure-registries \
            --tls-cert server.crt \
            --tls-key server.key \
            --log-file kube-mqtt-mirror.log
          
          CA_BUNDLE=$(cat server.crt | base64 | tr -d '\n')
          # Wait for the program to start
          sleep 5

          # Create a MutatingWebhookConfiguration
          kubectl apply -f - <<EOF
          apiVersion: admissionregistration.k8s.io/v1
          kind: MutatingWebhookConfiguration
          metadata:
            name: webhook-mirroring
          webhooks:
            - name: webhook.mirroring.example.com
              admissionReviewVersions: ["v1"]
              sideEffects: None
              rules:
                - operations: ["CREATE"]
                  apiGroups: [""]
                  apiVersions: ["v1"]
                  resources: ["pods"]
              clientConfig:
                url: "https://172.17.0.1:8443/webhook"
                caBundle: $CA_BUNDLE
              failurePolicy: Fail
          EOF

          # Create a pod with the webhook annotation
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Pod
          metadata:
            name: webhook-test-pod
            annotations:
              webhook: "true"
          spec:
            containers:
              - name: nginx
                image: nginx
          EOF

          # Wait for the pod to be created
          sleep 10

          # Wait for log file to be created and populated
          sleep 5
          
          # Check if log file exists and show contents
          if [ -f kube-mqtt-mirror.log ]; then
            echo "=== Program Logs ==="
            cat kube-mqtt-mirror.log
          else
            echo "Error: Log file kube-mqtt-mirror.log not found"
            exit 1
          fi
